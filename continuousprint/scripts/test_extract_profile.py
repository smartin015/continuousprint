import unittest
import tempfile
from .extract_profile import get_profile, get_header, get_footer


class TestProfileInference(unittest.TestCase):
    def testParameterized(self):
        for header, footer, want in [
            ("asdf", "", None),  # Random garbage
            ("; Generated by Kiri:Moto\n", "", None),  # Header match but no profile
            (
                "; Generated by Kiri:Moto\n; Target: orangesauce",
                "",
                None,
            ),  # Unknown profile
            ("; Generated by Kiri:Moto\n; Target: Creality.CR-30", "", "Creality CR30"),
            ("; Generated by Kiri:Moto\n; Target: Mini Prusa", "", "Prusa Mini"),
            (
                "; Generated by Kiri:Moto\n; Target: Delta V2",
                "",
                "Monoprice Mini Delta V2",
            ),
            (
                "; generated by PrusaSlicer 2.4.2+win64 on 2022-08-22 at 01:21:14 UTC\n",
                "; printer_model = MK3S\n",
                "Prusa i3 MK3S+",
            ),
            (
                "; G-Code generated by Simplify3D(R) Version 4.1.2\n;   profileName,Prusa Research Original Prusa i3 MK3",
                "",
                "Prusa i3 MK3S+",
            ),
        ]:
            with self.subTest(header=header, footer=footer, want=want):
                hdr = header.split("\n")
                ftr = footer.split("\n")
                result = get_profile(hdr, ftr)
                self.assertEqual(result, want)


class TestFileParsing(unittest.TestCase):
    def testGetHeader(self):
        with tempfile.NamedTemporaryFile() as ntf:
            with open(ntf.name, "w") as f:
                f.write("; Line 1\n; Line 2\n\n\nG0 X5\n; Another line\n")

            self.assertEqual(get_header(ntf.name), ["; Line 1\n", "; Line 2\n"])

    def testGetFooterSingleLineFile(self):
        with tempfile.NamedTemporaryFile() as ntf:
            with open(ntf.name, "w") as f:
                f.write("; Line1\n")
            self.assertEqual(get_footer(ntf.name), [])

    def testGetFooterLongFile(self):
        with tempfile.NamedTemporaryFile() as ntf:
            with open(ntf.name, "w") as f:
                f.write("; Header1\n; Header2\n")
                for i in range(1000):
                    f.write(f"G0 X{i}\n")
                f.write("; Line 1\n; Line 2\n")
            self.assertEqual(get_footer(ntf.name), ["; Line 1\n", "; Line 2\n"])
